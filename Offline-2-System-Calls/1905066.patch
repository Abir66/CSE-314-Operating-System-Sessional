diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..402e384
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,11 @@
+{
+    "files.associations": {
+        "stat.h": "c",
+        "syscall_stat.h": "c",
+        "types.h": "c",
+        "defs.h": "c",
+        "riscv.h": "c",
+        "memlayout.h": "c",
+        "param.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..3b626b6 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_history\
+	$U/_exit\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..e4474bf 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct syscall_stat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            print_trace(struct proc *p, uint64 args[], char strings[][100], int return_value, char *syscall_names[], char *syscall_arg_types[]);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -140,6 +142,7 @@ void            argaddr(int, uint64 *);
 int             fetchstr(uint64, char*, int);
 int             fetchaddr(uint64, uint64*);
 void            syscall();
+void            syscall_stat_init();
 
 // trap.c
 extern uint     ticks;
@@ -185,5 +188,8 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+// start.c
+void timerhalt();
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
index fb31b32..c72c5c2 100644
--- a/kernel/kernelvec.S
+++ b/kernel/kernelvec.S
@@ -97,12 +97,17 @@ timervec:
         # scratch[0,8,16] : register save area.
         # scratch[24] : address of CLINT's MTIMECMP register.
         # scratch[32] : desired interval between interrupts.
+        # scratch[40] : halt flag set by timerhalt.
         
         csrrw a0, mscratch, a0
         sd a1, 0(a0)
         sd a2, 8(a0)
         sd a3, 16(a0)
 
+        # halt if timerhalt has set halt flag to 1
+        ld a1, 40(a0)
+        bne a1, zero, halt
+
         # schedule the next timer interrupt
         # by adding interval to mtimecmp.
         ld a1, 24(a0) # CLINT_MTIMECMP(hart)
@@ -122,3 +127,14 @@ timervec:
         csrrw a0, mscratch, a0
 
         mret
+
+halt:
+        # based on qemu's hw/riscv/virt.c:
+        # qemu halts if FINISHER_PASS(=0x5555) is 
+        # written at address *VIRT_TEST(=0x100000L)
+        lui a1, 0x100
+        lui a2, 0x5
+        addi a2, a2, 0x555
+        sw a2, 0(a1)
+spin:
+        j spin
\ No newline at end of file
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..227d1d3 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -30,6 +30,7 @@ main()
     virtio_disk_init(); // emulated hard disk
     userinit();      // first user process
     __sync_synchronize();
+    syscall_stat_init();
     started = 1;
   } else {
     while(started == 0)
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..e96f2c5 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "syscall_stat.h"
 
 struct cpu cpus[NCPU];
 
@@ -169,6 +170,7 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->trace_id = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -322,6 +324,9 @@ fork(void)
   np->state = RUNNABLE;
   release(&np->lock);
 
+  // copy trace_id in child process
+  np->trace_id = p->trace_id;
+
   return pid;
 }
 
@@ -681,3 +686,25 @@ procdump(void)
     printf("\n");
   }
 }
+
+void print_trace(struct proc *p, uint64 args[], char strings[][100], int return_value, char *syscall_names[], char *syscall_arg_types[])
+{
+  printf("pid: %d, syscall: %s, args: (", p->pid, syscall_names[p->trace_id]);
+
+  const char *arg_types = syscall_arg_types[p->trace_id];
+  int i, len = strlen(arg_types);
+
+  for (i = 0; i < len; i++)
+  {
+    if (i > 0)
+      printf(", ");
+    if (arg_types[i] == '1')
+      printf("%d", args[i]);
+    else if (arg_types[i] == '4')
+      printf("%s", strings[i]);
+    else
+      printf("%p", args[i]);
+  }
+
+  printf("), return: %d\n", return_value);
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..c72eb6d 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int trace_id;                // Trace ID
 };
diff --git a/kernel/spinlock.h b/kernel/spinlock.h
index 4392820..57e8482 100644
--- a/kernel/spinlock.h
+++ b/kernel/spinlock.h
@@ -1,3 +1,6 @@
+#ifndef SPINLOCK_H
+#define SPINLOCK_H
+
 // Mutual exclusion lock.
 struct spinlock {
   uint locked;       // Is the lock held?
@@ -7,3 +10,4 @@ struct spinlock {
   struct cpu *cpu;   // The cpu holding the lock.
 };
 
+#endif
\ No newline at end of file
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..edea562 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -11,7 +11,7 @@ void timerinit();
 __attribute__ ((aligned (16))) char stack0[4096 * NCPU];
 
 // a scratch area per CPU for machine-mode timer interrupts.
-uint64 timer_scratch[NCPU][5];
+uint64 timer_scratch[NCPU][6];
 
 // assembly code in kernelvec.S for machine-mode timer interrupt.
 extern void timervec();
@@ -76,6 +76,7 @@ timerinit()
   uint64 *scratch = &timer_scratch[id][0];
   scratch[3] = CLINT_MTIMECMP(id);
   scratch[4] = interval;
+  scratch[5] = 0; // halt flag
   w_mscratch((uint64)scratch);
 
   // set the machine-mode trap handler.
@@ -87,3 +88,9 @@ timerinit()
   // enable machine-mode timer interrupts.
   w_mie(r_mie() | MIE_MTIE);
 }
+
+
+void timerhalt()
+{
+  timer_scratch[0][5] = 1;
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..991cc2d 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -5,27 +5,26 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "syscall.h"
+#include "syscall_stat.h"
 #include "defs.h"
 
 // Fetch the uint64 at addr from the current process.
-int
-fetchaddr(uint64 addr, uint64 *ip)
+int fetchaddr(uint64 addr, uint64 *ip)
 {
   struct proc *p = myproc();
-  if(addr >= p->sz || addr+sizeof(uint64) > p->sz) // both tests needed, in case of overflow
+  if (addr >= p->sz || addr + sizeof(uint64) > p->sz) // both tests needed, in case of overflow
     return -1;
-  if(copyin(p->pagetable, (char *)ip, addr, sizeof(*ip)) != 0)
+  if (copyin(p->pagetable, (char *)ip, addr, sizeof(*ip)) != 0)
     return -1;
   return 0;
 }
 
 // Fetch the nul-terminated string at addr from the current process.
 // Returns length of string, not including nul, or -1 for error.
-int
-fetchstr(uint64 addr, char *buf, int max)
+int fetchstr(uint64 addr, char *buf, int max)
 {
   struct proc *p = myproc();
-  if(copyinstr(p->pagetable, buf, addr, max) < 0)
+  if (copyinstr(p->pagetable, buf, addr, max) < 0)
     return -1;
   return strlen(buf);
 }
@@ -34,7 +33,8 @@ static uint64
 argraw(int n)
 {
   struct proc *p = myproc();
-  switch (n) {
+  switch (n)
+  {
   case 0:
     return p->trapframe->a0;
   case 1:
@@ -53,8 +53,7 @@ argraw(int n)
 }
 
 // Fetch the nth 32-bit system call argument.
-void
-argint(int n, int *ip)
+void argint(int n, int *ip)
 {
   *ip = argraw(n);
 }
@@ -62,8 +61,7 @@ argint(int n, int *ip)
 // Retrieve an argument as a pointer.
 // Doesn't check for legality, since
 // copyin/copyout will do that.
-void
-argaddr(int n, uint64 *ip)
+void argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
 }
@@ -71,8 +69,7 @@ argaddr(int n, uint64 *ip)
 // Fetch the nth word-sized system call argument as a null-terminated string.
 // Copies into buf, at most max.
 // Returns string length if OK (including nul), -1 if error.
-int
-argstr(int n, char *buf, int max)
+int argstr(int n, char *buf, int max)
 {
   uint64 addr;
   argaddr(n, &addr);
@@ -101,47 +98,164 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
+extern uint64 sys_halt(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+    [SYS_fork] sys_fork,
+    [SYS_exit] sys_exit,
+    [SYS_wait] sys_wait,
+    [SYS_pipe] sys_pipe,
+    [SYS_read] sys_read,
+    [SYS_kill] sys_kill,
+    [SYS_exec] sys_exec,
+    [SYS_fstat] sys_fstat,
+    [SYS_chdir] sys_chdir,
+    [SYS_dup] sys_dup,
+    [SYS_getpid] sys_getpid,
+    [SYS_sbrk] sys_sbrk,
+    [SYS_sleep] sys_sleep,
+    [SYS_uptime] sys_uptime,
+    [SYS_open] sys_open,
+    [SYS_write] sys_write,
+    [SYS_mknod] sys_mknod,
+    [SYS_unlink] sys_unlink,
+    [SYS_link] sys_link,
+    [SYS_mkdir] sys_mkdir,
+    [SYS_close] sys_close,
+    [SYS_trace] sys_trace,
+    [SYS_history] sys_history,
+    [SYS_halt] sys_halt,
 };
 
-void
-syscall(void)
+static char *syscall_names[] = {
+    [0] "",
+    [SYS_fork] "fork",
+    [SYS_exit] "exit",
+    [SYS_wait] "wait",
+    [SYS_pipe] "pipe",
+    [SYS_read] "read",
+    [SYS_kill] "kill",
+    [SYS_exec] "exec",
+    [SYS_fstat] "fstat",
+    [SYS_chdir] "chdir",
+    [SYS_dup] "dup",
+    [SYS_getpid] "getpid",
+    [SYS_sbrk] "sbrk",
+    [SYS_sleep] "sleep",
+    [SYS_uptime] "uptime",
+    [SYS_open] "open",
+    [SYS_write] "write",
+    [SYS_mknod] "mknod",
+    [SYS_unlink] "unlink",
+    [SYS_link] "link",
+    [SYS_mkdir] "mkdir",
+    [SYS_close] "close",
+    [SYS_trace] "trace",
+    [SYS_history] "history",
+    [SYS_halt] "halt",
+};
+
+
+static char *syscall_arg_types[] = {
+    [0] "",
+    [SYS_fork] "",
+    [SYS_exit] "1",
+    [SYS_wait] "2",
+    [SYS_pipe] "2",
+    [SYS_read] "131",
+    [SYS_kill] "1",
+    [SYS_exec] "45",
+    [SYS_fstat] "16",
+    [SYS_chdir] "4",
+    [SYS_dup] "1",
+    [SYS_getpid] "",
+    [SYS_sbrk] "1",
+    [SYS_sleep] "1",
+    [SYS_uptime] "",
+    [SYS_open] "41",
+    [SYS_write] "171",
+    [SYS_mknod] "488",
+    [SYS_unlink] "4",
+    [SYS_link] "44",
+    [SYS_mkdir] "4",
+    [SYS_close] "1",
+    [SYS_trace] "1",
+    [SYS_history] "19",
+    [SYS_halt] "",
+};
+
+struct syscall_stat syscall_stats[25];
+
+void syscall_stat_init(){
+  for(int i = 1; i<25; i++) {
+    syscall_stats[i].count = 0;
+    syscall_stats[i].accum_time = 0;
+    strncpy(syscall_stats[i].syscall_name, syscall_names[i], 15);
+  }
+}
+
+// int---> 1
+// int*---> 2
+// void*---> 3
+// const char*---> 4
+// char**---> 5
+// struct stat*---> 6
+// const void*---> 7
+// short---> 8
+// struct syscall_stat*---> 9
+
+void syscall(void)
 {
   int num;
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+  if (num > 0 && num < NELEM(syscalls) && syscalls[num])
+  {
+    // save args because they will be overwritten by the system call
+    uint64 args[] = {p->trapframe->a0, p->trapframe->a1, p->trapframe->a2, p->trapframe->a3, p->trapframe->a4, p->trapframe->a5};
+    char strings[6][100];
+
+    // save strings
+    if (num == p->trace_id)
+    {
+      for (int i = 0; i < 6; i++)
+        if (syscall_arg_types[num][i] == '4') argstr(i, strings[i], 100);
+    }
+
+    uint ticks_start, ticks_end, ticks_diff;
+
+    acquire(&tickslock);
+    ticks_start = ticks;
+    release(&tickslock);
+
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
-  } else {
+
+    acquire(&tickslock);
+    ticks_end = ticks;
+    release(&tickslock);
+
+    ticks_diff = ticks_end - ticks_start;
+    
+    // acquire lock of syscall_stats[num]
+    acquire(&syscall_stats[num].lock);
+    syscall_stats[num].count++;
+    syscall_stats[num].accum_time += ticks_diff;
+    release(&syscall_stats[num].lock);
+
+
+    if (num == p->trace_id) print_trace(p, args, strings, p->trapframe->a0, syscall_names, syscall_arg_types);
+  }
+  else
+  {
     printf("%d %s: unknown sys call %d\n",
-            p->pid, p->name, num);
+           p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
-}
+}
\ No newline at end of file
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..cabc838 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_history 23
+#define SYS_halt 24
\ No newline at end of file
diff --git a/kernel/syscall_stat.h b/kernel/syscall_stat.h
new file mode 100644
index 0000000..f1bc45c
--- /dev/null
+++ b/kernel/syscall_stat.h
@@ -0,0 +1,14 @@
+#ifndef SYSCALL_STAT_H
+#define SYSCALL_STAT_H
+
+#include "spinlock.h"
+struct syscall_stat {
+    struct spinlock lock;
+    char syscall_name[16];
+    int count;
+    int accum_time;
+};
+
+extern struct syscall_stat syscall_stats[25];
+
+#endif
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..73864c0 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "syscall_stat.h"
 
 uint64
 sys_exit(void)
@@ -89,3 +90,49 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  // get the trace ID
+  int id;
+  argint(0,&id);
+
+  // if invalid ID, return -1
+  if(id <= 0 || id > 23) return -1;
+
+  // set the trace ID of the current process
+  myproc()->trace_id = id;
+
+  return 1;
+}
+
+uint64
+sys_history(void){
+  
+  int syscall_id;
+  uint64 syscall_stat;
+  
+  argint(0,&syscall_id);
+  argaddr(1,&syscall_stat);
+
+  // if invalid syscall ID, return -1
+  if(syscall_id <= 0 || syscall_id > 24) return -1;
+
+  // copy the syscall_stat struct to user space
+  acquire(&syscall_stats[syscall_id].lock);
+  int r = copyout(myproc()->pagetable,syscall_stat,(char*)&syscall_stats[syscall_id],sizeof(struct syscall_stat));
+  release(&syscall_stats[syscall_id].lock);
+  
+  // if copyout failed, return -1
+  if(r < 0) return -1;
+  
+  return 0;
+}
+
+// https://github.com/mit-pdos/xv6-riscv/issues/60
+uint64
+sys_halt(void){
+  timerhalt();
+  return 0;
+}
diff --git a/user/exit.c b/user/exit.c
new file mode 100644
index 0000000..76f7346
--- /dev/null
+++ b/user/exit.c
@@ -0,0 +1,12 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+
+int
+main(int argc, char *argv[])
+{
+    halt();
+    exit(0);
+}
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..e1ee6c2
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,29 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/syscall_stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  
+  if(argc > 2 || (argc == 2 && (argv[1][0] < '0' || argv[1][0] > '9'))){
+    fprintf(2, "Usage: %s [sys_call_num]\n", argv[0]);
+    exit(1);
+  }
+
+  struct syscall_stat history_stat;
+
+  if(argc == 2){
+    history(atoi(argv[1]), &history_stat);
+    printf("%d:\tsyscall: %s, #: %d, time: %d\n", atoi(argv[1]), history_stat.syscall_name, history_stat.count, history_stat.accum_time);
+    exit(0);
+  }
+
+  for(int i = 1; i <= 23; i++){
+    history(i, &history_stat);
+    printf("%d:\tsyscall: %s, #: %d, time: %d\n", i, history_stat.syscall_name, history_stat.count, history_stat.accum_time);
+  }
+  exit(0);
+}
diff --git a/user/sh.c b/user/sh.c
index 836ebcb..42a7b4c 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -165,7 +165,8 @@ main(void)
         fprintf(2, "cannot cd %s\n", buf+3);
       continue;
     }
-    if(fork1() == 0)
+    
+    else if(fork1() == 0)
       runcmd(parsecmd(buf));
     wait(0);
   }
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..856b78e 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct syscall_stat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int history(int, struct syscall_stat*);
+void halt(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..eca8bce 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
+entry("halt");
