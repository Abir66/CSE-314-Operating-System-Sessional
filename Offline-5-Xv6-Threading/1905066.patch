diff --git a/Makefile b/Makefile
index 39a99d7..a21fba6 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,11 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
+	$U/_producer_consumer\
+	$U/_threads2\
+
+
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..359a300 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             thread_create(void(*fcn)(void*), void* args, void* stack);
+int             thread_join(int thread_id);
+void            thread_exit(void);
+void            conditional_wakeup(int pid);
+int             conditional_sleep(uint64 lock_address);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -165,7 +170,9 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
-void            uvmfree(pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64);
+int             uvm_alloc_mirror(pagetable_t, pagetable_t, uint64, uint64);
+void            uvmfree(pagetable_t, uint64, int);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
 pte_t *         walk(pagetable_t, uint64, int);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..96ac42d 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -12,6 +12,8 @@ struct proc proc[NPROC];
 
 struct proc *initproc;
 
+struct spinlock mem_locks[NPROC];
+
 int nextpid = 1;
 struct spinlock pid_lock;
 
@@ -125,6 +127,9 @@ found:
   p->pid = allocpid();
   p->state = USED;
 
+  p->mem_id = p->pid % NPROC; // for PROCESS
+  p->memlock_ptr = &mem_locks[p->mem_id]; 
+
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
@@ -158,8 +163,14 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  if(p->pagetable){
+    if(p->is_thread == 0) proc_freepagetable(p->pagetable, p->sz);
+    else{
+      uvmunmap(p->pagetable, TRAMPOLINE, 1, 0);
+      uvmunmap(p->pagetable, TRAPFRAME, 1, 0);
+      uvmfree(p->pagetable, p->sz, 0);
+    }
+  }
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -189,7 +200,7 @@ proc_pagetable(struct proc *p)
   // to/from user space, so not PTE_U.
   if(mappages(pagetable, TRAMPOLINE, PGSIZE,
               (uint64)trampoline, PTE_R | PTE_X) < 0){
-    uvmfree(pagetable, 0);
+    uvmfree(pagetable, 0, 1);
     return 0;
   }
 
@@ -198,7 +209,7 @@ proc_pagetable(struct proc *p)
   if(mappages(pagetable, TRAPFRAME, PGSIZE,
               (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
     uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-    uvmfree(pagetable, 0);
+    uvmfree(pagetable, 0, 1);
     return 0;
   }
 
@@ -212,7 +223,7 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
-  uvmfree(pagetable, sz);
+  uvmfree(pagetable, sz, 1);
 }
 
 // a user program that calls exec("/init")
@@ -262,15 +273,40 @@ growproc(int n)
   uint64 sz;
   struct proc *p = myproc();
 
+  acquire(p->memlock_ptr);
   sz = p->sz;
+  
+  uint64 oldsz = sz;
+  uint64 newsz = sz + n;
+
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+      release(p->memlock_ptr);
       return -1;
     }
   } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
+
+  
+  struct proc *pp;
+  for(pp = proc; pp < &proc[NPROC]; pp++){
+    if(pp->mem_id == p->mem_id && pp->pid != p->pid){
+
+      printf("oldsz: %d, newsz: %d\n", oldsz, newsz);
+      printf("p->id: %d, pp->id: %d\n", p->pid, pp->pid);
+      printf("p->mem_id: %d, pp->mem_id: %d\n", p->mem_id, pp->mem_id);
+
+      if(n>0) uvm_alloc_mirror(p->pagetable, pp->pagetable, oldsz, newsz);
+      
+      if(n<0){
+        int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+        uvmunmap(pp->pagetable, PGROUNDUP(newsz), npages, 0);
+      }
+    }
+  }
+  release(p->memlock_ptr);
   return 0;
 }
 
@@ -561,6 +597,52 @@ sleep(void *chan, struct spinlock *lk)
   acquire(lk);
 }
 
+int 
+conditional_sleep(uint64 lock_address)
+{
+  struct proc *p = myproc();
+  // Must acquire p->lock in order to
+  // change p->state and then call sched.
+  // Once we hold p->lock, we can be
+  // guaranteed that we won't miss any wakeup
+  // (wakeup locks p->lock),
+  // so it's okay to release lk.
+
+  acquire(&p->lock);  //DOC: sleeplock1
+  
+  
+  uint64 va0, pa0;
+  va0 = PGROUNDDOWN(lock_address);
+  pa0 = walkaddr(p->pagetable, va0);
+  if(pa0 == 0) return -1;
+  __sync_synchronize();
+  __sync_lock_release((uint8*)(pa0 + (lock_address - va0)));
+
+
+  p->state = SLEEPING;
+  sched();
+  release(&p->lock);
+  return 0;
+}
+
+// Wake up all processes sleeping on chan.
+// Must be called without any p->lock.
+void
+conditional_wakeup(int pid)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p != myproc()){
+      acquire(&p->lock);
+      if(p->state == SLEEPING && p->pid == pid) {
+        p->state = RUNNABLE;
+      }
+      release(&p->lock);
+    }
+  }
+}
+
 // Wake up all processes sleeping on chan.
 // Must be called without any p->lock.
 void
@@ -681,3 +763,150 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+// ----------------------threading offline----------------------
+int
+thread_create(void(*fcn)(void*), void* args, void* stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  acquire(p->memlock_ptr);
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->sz = p->sz;
+  release(p->memlock_ptr);
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+  np->trapframe->epc = (uint64)fcn;
+  np->trapframe->sp = (uint64)stack + PGSIZE;
+  np->trapframe->sp -= np->trapframe->sp % 16;
+  np->trapframe->a0 = (uint64)args;
+  np->is_thread = 1;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  np->mem_id = p->mem_id;
+  np->memlock_ptr = p->memlock_ptr;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+
+
+int
+thread_join(int thread_id)
+{
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+  void* chan;
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->pid == thread_id && pp->mem_id == p->mem_id){
+        chan = pp;
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+    
+    // Wait for a child to exit.   
+    sleep(chan, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
+void
+thread_exit(void)
+{
+  struct proc *p = myproc();
+
+  if(p == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(int fd = 0; fd < NOFILE; fd++){
+    if(p->ofile[fd]){
+      struct file *f = p->ofile[fd];
+      fileclose(f);
+      p->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(p->cwd);
+  end_op();
+  p->cwd = 0;
+
+  acquire(&wait_lock);
+
+  // Give any children to init.
+  reparent(p);
+
+  // Parent might be sleeping in wait().
+  wakeup(p);
+
+  
+  acquire(&p->lock);
+
+  //p->xstate = status;
+  p->state = ZOMBIE;
+
+  release(&wait_lock);
+  // Jump into the scheduler, never to return.
+  sched();
+  panic("zombie exit");
+}
+
+
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..d15415e 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -81,6 +81,11 @@ struct trapframe {
 
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+// struct mem_lock{
+//   struct spinlock memlock;
+//   int ref_count;
+// };
+
 // Per-process state
 struct proc {
   struct spinlock lock;
@@ -104,4 +109,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  // threading
+  struct spinlock* memlock_ptr;// find places to set and release the locks 
+  int is_thread;               // if it is thread
+  int mem_id;                  // All threads will have the same physical pages with the mothrer, hence the same memory ID
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..4e17739 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,12 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_conditional_sleep(void);
+extern uint64 sys_conditional_wakeup(void);
+extern uint64 sys_yield(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +132,13 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
+[SYS_conditional_sleep] sys_conditional_sleep,
+[SYS_conditional_wakeup] sys_conditional_wakeup,
+[SYS_yield] sys_yield,
+
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..0d28af8 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,9 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create   22
+#define SYS_thread_join     23
+#define SYS_thread_exit     24
+#define SYS_conditional_sleep 25
+#define SYS_conditional_wakeup 26
+#define SYS_yield 27
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..82343ed 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,59 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+//------------------Offline------------------
+uint64
+sys_thread_create(void)
+{
+  void (*start_routine)(void*);
+  void *arg;
+  void *stack;
+  argaddr(0, (uint64*)&start_routine);
+  argaddr(1, (uint64*)&arg);
+  argaddr(2, (uint64*)&stack);
+  // printf("start_routine: %p\n", start_routine);
+  // printf("arg: %p\n", arg);
+  // printf("stack: %p\n", stack);
+
+  return thread_create(start_routine, arg, stack);
+}
+
+uint64
+sys_thread_join(void)
+{
+  int thread_id;
+  argint(0, &thread_id);
+  return thread_join(thread_id);
+}
+
+uint64
+sys_thread_exit(void)
+{
+  thread_exit();
+  return 1;
+}
+
+uint64
+sys_conditional_sleep(void)
+{
+  uint64 lock_address;
+  argaddr(0, &lock_address);
+  return conditional_sleep(lock_address);
+}
+
+uint64
+sys_conditional_wakeup(void)
+{
+  int pid;
+  argint(0, &pid);
+  conditional_wakeup(pid);
+  return 0;
+}
+
+uint64
+sys_yield(void)
+{
+  yield();
+  return 0;
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..97e45cb 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -289,10 +289,10 @@ freewalk(pagetable_t pagetable)
 // Free user memory pages,
 // then free page-table pages.
 void
-uvmfree(pagetable_t pagetable, uint64 sz)
+uvmfree(pagetable_t pagetable, uint64 sz, int clear_flag)
 {
   if(sz > 0)
-    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, clear_flag);
   freewalk(pagetable);
 }
 
@@ -332,6 +332,63 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+//---------------------- Threading offline ---------------------------
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+
+int
+uvm_alloc_mirror(pagetable_t old, pagetable_t new, uint64 oldsz, uint64 newsz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = PGROUNDUP(oldsz); i < newsz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+
+// ---------------------------------------------------------------------
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/conditional_variable.h b/user/conditional_variable.h
new file mode 100644
index 0000000..2428a1a
--- /dev/null
+++ b/user/conditional_variable.h
@@ -0,0 +1,51 @@
+#ifndef THREAD_COND_VAR_H
+#define THREAD_COND_VAR_H
+
+#include "thread_mutex.h"
+#include "queue.h"
+#include "user.h"
+
+struct conditional_variable
+{
+    struct queue q;
+    struct thread_mutex mutex;
+};
+
+void cv_init(struct conditional_variable *cv)
+{
+    queue_init(&cv->q);
+    thread_mutex_init(&cv->mutex);
+}
+
+void cv_wait(struct conditional_variable *cv, struct thread_mutex *mx)
+{
+    int pid = getpid();
+    thread_mutex_lock(&cv->mutex);
+    queue_push(&cv->q, pid);
+    thread_mutex_unlock(&cv->mutex);
+    
+    // /* The suspend and release_mutex() operation should be atomic */
+    // release_mutex (mx));
+    // thr_suspend(self); /* Sleep 'til someone wakes us */
+    conditional_sleep(&mx->locked);
+
+    thread_mutex_lock(mx); 
+    return;
+}
+
+void cv_signal(struct conditional_variable *cv){
+    int thread_id;
+    thread_mutex_lock(&cv->mutex);
+    thread_id = queue_front(&cv->q);
+    queue_pop(&cv->q);
+    thread_mutex_unlock(&cv->mutex);
+  
+    if (thread_id > 0){
+        
+        conditional_wakeup(thread_id);
+    }
+
+    return;
+}
+
+#endif
\ No newline at end of file
diff --git a/user/producer_consumer.c b/user/producer_consumer.c
new file mode 100644
index 0000000..7b8e329
--- /dev/null
+++ b/user/producer_consumer.c
@@ -0,0 +1,117 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/queue.h"
+#include "user/thread_mutex.h"
+#include "user/thread_spinlock.h"
+#include "user/conditional_variable.h"
+#include "user/semaphore.h"
+
+
+
+struct queue q;
+struct thread_mutex lock;
+struct semaphore empty;
+struct semaphore full;
+
+struct thread_mutex print_lock;
+struct thread_spinlock spinlock;
+
+
+
+// macro for printf to use print_lock mutex
+#define printf(fmt, ...) \
+    thread_mutex_lock(&print_lock); \
+    printf(fmt, __VA_ARGS__); \
+    thread_mutex_unlock(&print_lock);
+
+
+void init_semaphore()
+{
+    thread_mutex_init(&lock);
+    sem_init(&empty, 5);
+    sem_init(&full, 0);
+    thread_spin_init(&spinlock);
+}
+
+void ProducerFunc(void * arg)
+{	
+	printf("%s\n",(char*)arg);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore empty
+        sem_wait(&empty);
+
+		// wait for mutex lock
+		thread_mutex_lock(&lock);
+        //thread_spin_lock(&spinlock);
+
+		sleep(1);	
+        queue_push(&q, i);
+		printf("producer produced item %d\n",i);
+		
+		// unlock mutex lock
+        thread_mutex_unlock(&lock);
+        //thread_spin_unlock(&spinlock);
+	
+		// post semaphore full
+        sem_post(&full);
+	}
+    thread_exit();
+}
+
+void ConsumerFunc(void * arg)
+{
+	printf("%s\n",(char*)arg);
+	int i;
+	for(i=1;i<=10;i++)
+	{	
+		// wait for semphore full
+        sem_wait(&full);
+		
+        // wait for mutex lock
+        thread_mutex_lock(&lock);
+        //thread_spin_lock(&spinlock);
+			
+		sleep(1);
+		int item = queue_front(&q);
+		queue_pop(&q);
+		printf("consumer consumed item %d\n",item);	
+
+
+		// unlock mutex lock
+        thread_mutex_unlock(&lock);
+        //thread_spin_unlock(&spinlock);
+
+		// post semaphore empty
+        sem_post(&empty);
+	}
+    thread_exit();
+}
+
+int main(void)
+{	
+	
+	init_semaphore();
+    thread_mutex_init(&print_lock);
+	
+	char * message1 = "i am producer";
+	char * message2 = "i am consumer";
+
+
+	void *s1, *s2;
+  	int thread1, thread2;
+
+  	s1 = malloc(4096);
+  	s2 = malloc(4096);
+
+    
+  	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
+  	thread2 = thread_create(ConsumerFunc, (void*)message2, s2); 
+
+  	thread_join(thread1);
+  	thread_join(thread2);	
+	
+	exit(0);
+}
diff --git a/user/queue.h b/user/queue.h
new file mode 100644
index 0000000..470b037
--- /dev/null
+++ b/user/queue.h
@@ -0,0 +1,49 @@
+#ifndef QUEUE_H
+#define QUEUE_H
+
+struct queue
+{
+    int arr[1001];
+    int front;
+    int rear;
+    int size;
+};
+
+void queue_init(struct queue *q)
+{
+    q->front = 0;
+    q->rear = 0;
+    q->size = 0;
+}
+
+void queue_push(struct queue *q, int x)
+{
+    q->arr[q->rear] = x;
+    q->rear = (q->rear + 1) % 16;
+    q->size++;
+}
+int queue_front(struct queue *q)
+{
+    if (q->size == 0)
+        return -1;
+    return q->arr[q->front];
+}
+
+void queue_pop(struct queue *q)
+{
+    if(q->size == 0) return;
+    q->front = (q->front + 1) % 16;
+    q->size--;
+}
+
+int queue_size(struct queue *q)
+{
+    return q->size;
+}
+
+int queue_empty(struct queue *q)
+{
+    return q->size == 0;
+}
+
+#endif
\ No newline at end of file
diff --git a/user/semaphore.h b/user/semaphore.h
new file mode 100644
index 0000000..89bb42e
--- /dev/null
+++ b/user/semaphore.h
@@ -0,0 +1,35 @@
+#ifndef SEMAPHORE_H
+#define SEMAPHORE_H
+
+#include "user/conditional_variable.h"
+#include "user/thread_mutex.h"
+
+struct semaphore {
+    int value;
+    struct conditional_variable cond;
+    struct thread_mutex lock;
+};
+
+void sem_init(struct semaphore *s, int value){
+    s->value = value;
+    cv_init(&s->cond);
+    thread_mutex_init(&s->lock);
+}
+
+void sem_wait(struct semaphore *s){
+    thread_mutex_lock(&s->lock);
+    while(s->value <= 0){
+        cv_wait(&s->cond, &s->lock);
+    }
+    s->value--;
+    thread_mutex_unlock(&s->lock);
+}
+
+void sem_post(struct semaphore *s){
+    thread_mutex_lock(&s->lock);
+    s->value++;
+    cv_signal(&s->cond);
+    thread_mutex_unlock(&s->lock);
+}
+
+#endif
\ No newline at end of file
diff --git a/user/thread_mutex.h b/user/thread_mutex.h
new file mode 100644
index 0000000..d3f5676
--- /dev/null
+++ b/user/thread_mutex.h
@@ -0,0 +1,63 @@
+#ifndef THREAD_MUTEX_H
+#define THREAD_MUTEX_H
+
+// Mutual exclusion spin locks.
+#include "kernel/types.h"
+#include "user/user.h"
+
+// Mutual exclusion lock.
+struct thread_mutex{
+  uint8 locked; 
+  uint64 pid;
+};
+
+
+void thread_mutex_init(struct thread_mutex *m){
+    m->locked = 0;
+    m->pid = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void thread_mutex_lock(struct thread_mutex *m)
+{
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&m->locked, 1) != 0) yield();
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  m->pid = getpid();
+}
+
+// Release the lock.
+void thread_mutex_unlock(struct thread_mutex *m)
+{
+  m->pid = 0;
+
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&m->locked);
+}
+
+#endif
\ No newline at end of file
diff --git a/user/thread_spinlock.h b/user/thread_spinlock.h
new file mode 100644
index 0000000..2a975b8
--- /dev/null
+++ b/user/thread_spinlock.h
@@ -0,0 +1,80 @@
+#ifndef THREAD_LOCK_H
+#define THREAD_LOCK_H
+
+// Mutual exclusion spin locks.
+#include "kernel/types.h"
+#include "user/user.h"
+
+// Mutual exclusion lock.
+struct thread_spinlock{
+  uint8 locked; 
+  uint64 pid;
+};
+
+
+void thread_spin_init(struct thread_spinlock *lk){
+    lk->locked = 0;
+    lk->pid = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void thread_spin_lock(struct thread_spinlock *lk)
+{
+//   if(thread_holding(lk))
+//     panic("acquire");
+
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  lk->pid = getpid();
+}
+
+// Release the lock.
+void thread_spin_unlock(struct thread_spinlock *lk)
+{
+//   if(!thread_holding(lk))
+//     panic("release");
+
+  lk->pid = 0;
+
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&lk->locked);
+
+}
+
+// Check whether this cpu is holding the lock.
+// Interrupts must be off.
+int thread_holding(struct thread_spinlock *lk)
+{
+  int r;
+  r = (lk->locked && lk->pid == getpid());
+  return r;
+}
+
+#endif
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..61e1959
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,86 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/thread_spinlock.h"
+#include "user/thread_mutex.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+struct thread_mutex print_lock;
+
+// macro for printf to use print_lock mutex
+#define printf(fmt, ...) \
+    thread_mutex_lock(&print_lock); \
+    printf(fmt, __VA_ARGS__); \
+    thread_mutex_unlock(&print_lock);
+
+
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+void do_work(void *arg){
+    int i; 
+    int old;
+   
+    struct balance *b = (struct balance*) arg; 
+    printf( "Starting do_work: s:%s %d\n", b->name, b->amount);
+
+    for (i = 0; i < b->amount; i++) { 
+        // lock and mlock will be implemented by you.
+        thread_spin_lock(&lock);
+        //thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	    // if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+        thread_spin_unlock(&lock);
+        //thread_mutex_unlock(&mlock);
+    }
+  
+    printf( "Done s:%s\n", b->name);
+    printf("Total balance: %d\n", total_balance);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+  thread_spin_init(&lock);
+  thread_mutex_init(&mlock);
+  thread_mutex_init(&print_lock);
+ 
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2); 
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/threads2.c b/user/threads2.c
new file mode 100644
index 0000000..1036f53
--- /dev/null
+++ b/user/threads2.c
@@ -0,0 +1,71 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/thread_spinlock.h"
+#include "user/thread_mutex.h"
+#include "user/conditional_variable.h"
+
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+// Shared data and synchronization variables
+int sharedValue = 0;
+//pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
+struct thread_mutex mutex;
+//pthread_cond_t condition = PTHREAD_COND_INITIALIZER;
+struct conditional_variable condition;
+
+// Thread function that increments the shared value
+void incrementThread(void *arg) {
+    for (int i = 0; i < 5; ++i) {
+        thread_mutex_lock(&mutex);
+        sharedValue++;
+        printf("Incremented: %d\n", sharedValue);
+        thread_mutex_unlock(&mutex);
+        cv_signal(&condition); // Signal waiting threads
+        sleep(1);
+    }
+    thread_exit();
+}
+
+// Thread function that waits until shared value is greater than a threshold
+void checkValueThread(void *arg) {
+    thread_mutex_lock(&mutex);
+    while (sharedValue <= 3) {
+        cv_wait(&condition, &mutex); // Wait for condition and release mutex
+    }
+    printf("Condition met: %d\n", sharedValue);
+    thread_mutex_unlock(&mutex);
+    thread_exit();
+}
+
+int main() {
+    struct balance b1 = {"b1", 3200};
+    struct balance b2 = {"b2", 2800};
+
+    thread_mutex_init(&mutex);
+    cv_init(&condition);
+
+    void *s1, *s2;
+    int thread1, thread2, r1, r2;
+
+    s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+    s2 = malloc(4096);
+
+    //pthread_create(&thread1, NULL, incrementThread, NULL);
+    //pthread_create(&thread2, NULL, checkValueThread, NULL);
+
+    thread1 = thread_create(incrementThread, (void*)&b1, s1);
+    thread2 = thread_create(checkValueThread, (void*)&b2, s2);
+
+    r1 = thread_join(thread1);
+    r2 = thread_join(thread2);
+
+    printf("Threads finished: (%d):%d, (%d):%d,\n",
+      thread1, r1, thread2, r2);
+
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..897be0f 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,8 @@
-struct stat;
+#ifndef USER_H
+#define USER_H
 
+#include "kernel/types.h"
+struct stat;
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
@@ -22,6 +25,13 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+// thread offline
+int thread_create(void(*)(void*), void*, void*);
+int thread_join(int);
+void thread_exit(void);
+int conditional_sleep(uint8*);
+void conditional_wakeup(int);
+void yield(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -39,3 +49,5 @@ void free(void*);
 int atoi(const char*);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
+
+#endif // USER_H
\ No newline at end of file
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..eb2ce5a 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,10 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+# offline
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("conditional_sleep");
+entry("conditional_wakeup");
+entry("yield");
